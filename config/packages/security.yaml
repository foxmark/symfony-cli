security:
    enable_authenticator_manager: true

    # uncomment to show email not found error instead bad credentials (google: user enumeration)
    # hide_user_not_found: false

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            # if you need more control
            # custom_authenticator: App\Security\LoginFormAuthenticator
            # if you need generic login use build in form_login
            form_login:
                # run: [bin/console debug:config security] to see current config
                # or [bin/console config:dump security] to see all available options
                login_path: app_login
                check_path: app_login
                # both to match login form input names
                username_parameter: email
                password_parameter: password
                enable_csrf: true
                csrf_parameter: _csrf_token
                csrf_token_id: form_login
            logout: true
            remember_me:
                secret: '%kernel.secret%'
                remember_me_parameter: _remember_me
                signature_properties: [password]
                # optionally
                # always_remember_me: true


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
